---
- name: controlplane set up start
  hosts: controlplane
  connection: local
  become: true

  tasks:
    - name: disable swap
      shell: |
             swapoff -a
             sed -i '/ swap / s/^/#/' /etc/fstab
      when: ansible_swaptotal_mb > 0

    - name: add module load config
      blockinfile:
        path: /etc/modules-load.d/k8s.conf
        block: |
               overlay
               br_netfilter
        create: true

    - name: load the modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: add sysctl parameters and apply
      sysctl:
        sysctl_file: /etc/sysctl.d/k8s.conf
        name: "{{ item }}"
        value: '1'
        reload: yes
      loop:
        - net.bridge.bridge-nf-call-iptables
        - net.bridge.bridge-nf-call-ip6tables
        - net.ipv4.ip_forward

    - name: set up the repository for install docker
      apt:
        force_apt_get: yes
        update_cache: yes
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release

    - name: create GPG key directory
      file:
        path: /etc/apt/keyrings
        state: directory

    - name: add docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.gpg
  
    - name: get deb architecture
      shell: dpkg --print-architecture
      register: deb_architecture

    - name: add the docker apt repository
      apt_repository:
        repo: deb [arch={{ deb_architecture.stdout }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable

    - name: install docker and containerd
      apt:
        force_apt_get: yes
        update_cache: yes
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
  
    - name: containerd cgroup driver config
      shell: |
             containerd config default | tee /etc/containerd/config.toml
             sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
      notify: restart containerd

    - name: force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers

    - name: add vagrant user in docker group
      user:
        name: vagrant
        groups: docker
        append: yes

    - name: set up the repository for install kubernetes
      apt:
        force_apt_get: yes
        update_cache: yes
        name: apt-transport-https

    - name: add google GPG key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        keyring: /usr/share/keyrings/kubernetes-archive-keyring.gpg
  
    - name: add the kubernetes apt repository
      apt_repository:
        repo: deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main

    - name: install kubeadm, kubelet, kubectl
      apt:
        force_apt_get: yes
        update_cache: yes
        name:
          - kubeadm
          - kubelet 
          - kubectl
  
    - name: kubeadm, kubelet, kubectl apt-mark hold
      shell: apt-mark hold kubeadm kubelet kubectl

    - name: install bash-completion
      apt:
        force_apt_get: yes
        update_cache: yes
        name: bash-completion
    
    - name: add kubectl bash-completion, ansible alias config to .bashrc
      become_user: vagrant
      blockinfile:
        path: "~/.bashrc"
        block: |
              source <(kubectl completion bash)
              alias k=kubectl
              complete -o default -F __start_kubectl k
              alias ans=ansible
              alias anp=ansible-playbook

    - name: initialize the Kubernetes cluster using kubeadm
      shell: kubeadm init --apiserver-advertise-address={{ ansible_eth1.ipv4.address }} --pod-network-cidr=192.168.0.0/16 >> ~/kubernetes_cluster_initialize.txt
      args:
        creates: ~/kubernetes_cluster_initialize.txt

    - name: create directory for kubeconfig
      become_user: vagrant
      file:
        path: $HOME/.kube
        state: directory

    - name: set up kubeconfig for user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/vagrant/.kube/config
        owner: vagrant
        group: vagrant
        remote_src: yes
    
    - name: install calico pod network
      become_user: vagrant
      shell: |
            kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/tigera-operator.yaml >> ~/kubernetes_cni.txt
            kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/custom-resources.yaml >> ~/kubernetes_cni.txt
      args:
        creates: ~/kubernetes_cni.txt

    - name: change kubernetes cluster internal-ip
      lineinfile:
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ ansible_eth1.ipv4.address }}
        create: true
      notify: restart kubelet

  handlers:
    - name: restart containerd
      service:
        name: containerd
        state: restarted

    - name: restart kubelet
      service:
        name: kubelet
        state: restarted
